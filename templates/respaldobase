<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Radio Hits{% endblock %}</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script> 
    {% block head %}{% endblock %}
</head>

<body class="bg-gradient-to-r from-black via-gray-900 to-black">
    {% block content %}{% endblock %}
    {% load static %}

    <!-- #COMPONENTE DE RADIO -->
    <div id="radio-floating-wrapper" style="
        position: fixed;
        top: 80vh;
        left: 1rem;
        width: 200px;
        max-width: 90vw;
        height: 65px;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0,0,0,0.3);
        background-image: url('{% static "imagenes/logo.jpg" %}');
        background-size: contain;
        background-repeat: no-repeat;
        background-position: center left;
        padding-left: 70px;
        display: flex;
        align-items: center;
        z-index: 9999;
        background-color: black;
        overflow: visible; /* Cambiado para que el indicador "EN VIVO" no se corte */
        touch-action: none;
        cursor: move;
    ">
        <!-- Vúmetro simulado -->
        <div class="vumeter">
            <div class="vumeter-bar"></div>
            <div class="vumeter-bar"></div>
            <div class="vumeter-bar"></div>
            <div class="vumeter-bar"></div>
            <div class="vumeter-bar"></div>
        </div>
        <!-- Indicador "EN VIVO" pulsante -->
        <div class="absolute -top-2.5 -right-2.5 z-10 pointer-events-none" 
             style="animation: live-indicator-pulse 1.5s infinite ease-in-out;">
            <div class="flex items-center bg-red-600 text-white text-xs font-bold uppercase px-3 py-1 rounded-full shadow-xl">
                <span class="w-2 h-2 bg-white rounded-full mr-2 animate-pulse"></span>
                En Vivo
            </div>
        </div>

        <iframe
        src="https://radio.tvstream.cl/8034/stream"
        id="radio-iframe"
        allow="autoplay"
        style="
            border: none;
            width: 90%;
            height: 60px;
            border-radius: 8px;
            background: transparent;
        "
    ></iframe>
    </div>

    <style>
        @media (max-width: 480px) {
            #radio-floating-wrapper {
                width: 90vw;
                height: 55px;
                padding-left: 60px;
            }

            #radio-iframe {
                height: 40px;
            }
        }

        /* Animación para el indicador "EN VIVO" */
        @keyframes live-indicator-pulse {
            0%, 100% {
                transform: scale(1);
                filter: drop-shadow(0 0 5px rgba(239, 68, 68, 0.8));
            }
            50% {
                transform: scale(1.05);
                filter: drop-shadow(0 0 12px rgba(239, 68, 68, 1));
            }
        }

        /* Estilos para el vúmetro */
        .vumeter {
            position: absolute;
            top: -30px; /* Ajustado para estar arriba del componente */
            left: 18px;
            display: flex;
            align-items: flex-end;
            height: 25px;
            gap: 3px;
            pointer-events: none;
        }

        .vumeter-bar {
            width: 4px;
            background: linear-gradient(to top, #ef4444, #ffffff); /* Degradado de rojo a blanco */
            animation: vumeter-dance 1.3s infinite ease-in-out;
            border-radius: 2px;
            box-shadow: 0 0 5px #ef4444; /* Sombra roja */
        }

        .vumeter-bar:nth-child(2) { animation-delay: -0.2s; }
        .vumeter-bar:nth-child(3) { animation-delay: -0.4s; }
        .vumeter-bar:nth-child(4) { animation-delay: -0.6s; }
        .vumeter-bar:nth-child(5) { animation-delay: -0.8s; }

        @keyframes vumeter-dance {
            0%, 100% { height: 2px; opacity: 0.7; }
            50% { height: 25px; opacity: 1; }
        }
    </style>

    <script>
        const dragElement = (elmnt) => {
            let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;

            elmnt.onmousedown = dragMouseDown;
            elmnt.ontouchstart = dragMouseDown;

            function dragMouseDown(e) {
                e = e || window.event;
                e.preventDefault();

                if (e.type === "touchstart") {
                    pos3 = e.touches[0].clientX;
                    pos4 = e.touches[0].clientY;
                    document.ontouchmove = elementDrag;
                    document.ontouchend = closeDragElement;
                } else {
                    pos3 = e.clientX;
                    pos4 = e.clientY;
                    document.onmousemove = elementDrag;
                    document.onmouseup = closeDragElement;
                }
            }

            function elementDrag(e) {
                e = e || window.event;
                e.preventDefault();
                if (e.type === "touchmove") {
                    pos1 = pos3 - e.touches[0].clientX;
                    pos2 = pos4 - e.touches[0].clientY;
                    pos3 = e.touches[0].clientX;
                    pos4 = e.touches[0].clientY;
                } else {
                    pos1 = pos3 - e.clientX;
                    pos2 = pos4 - e.clientY;
                    pos3 = e.clientX;
                    pos4 = e.clientY;
                }
                elmnt.style.top = (elmnt.offsetTop - pos2) + "px";
                elmnt.style.left = (elmnt.offsetLeft - pos1) + "px";
            }

            function closeDragElement() {
                document.onmouseup = null;
                document.onmousemove = null;
                document.ontouchend = null;
                document.ontouchmove = null;
            }
        };

        dragElement(document.getElementById("radio-floating-wrapper"));
    </script>

    <div class="django-messages" style="display: none;">
        {% if messages %}
            {% for message in messages %}
                <div class="alert alert-{{ message.tags }}">{{ message }}</div>
            {% endfor %}
        {% endif %}
    </div>

    {% block scripts %}
    <script>
        // Mixin para botones de SweetAlert2 con estilo Bootstrap/Tailwind
        const swalWithBootstrapButtons = Swal.mixin({
            customClass: {
                confirmButton: "bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded mx-2",
                cancelButton: "bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded mx-2"
            },
            buttonsStyling: false
        });

        // Función genérica para mostrar un SweetAlert (no toast, sin botón de confirmación, duración 1700ms)
        function showAlert(icon, title, text) {
            Swal.fire({
                icon: icon,
                title: title,
                html: `<div class="text-lg">${text}</div>`, // Texto más grande
                showConfirmButton: false,
                timer: 1700,
                timerProgressBar: true,
                showClass: {
                    popup: 'animate__animated animate__fadeInUp animate__faster'
                },
                hideClass: {
                    popup: 'animate__animated animate__fadeOutDown animate__faster'
                }
            });
        }

        // Función para mostrar SweetAlert para errores (alerta centrada con botón OK)
        function showErrorAlert(message) {
            Swal.fire({
                title: '¡Error!',
                text: message,
                icon: 'error',
                confirmButtonText: 'Ok'
            });
        }

        // Función para eliminar entrada del índice
        function confirmDeleteEntradaIndex(entradaId, entradaTitulo) {
            swalWithBootstrapButtons.fire({
                title: "¿Estás seguro?",
                text: `¿Deseas eliminar la entrada "${entradaTitulo}"? Esta acción no se puede deshacer.`,
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Sí, eliminar",
                cancelButtonText: "Cancelar",
                reverseButtons: true
            }).then((result) => {
                if (result.isConfirmed) {
                    // Solo redirigir, el mensaje de éxito vendrá de Django
                    window.location.href = `/delete_entrada_index/${entradaId}/`;
                } else if (result.dismiss === Swal.DismissReason.cancel) {
                    swalWithBootstrapButtons.fire({
                        title: "Cancelado",
                        text: "La entrada está a salvo :)",
                        icon: "info",
                        confirmButtonText: "OK"
                    });
                }
            });
        }

        document.addEventListener('DOMContentLoaded', function() {
            // Manejo de mensajes de Django con SweetAlert2
            const djangoMessagesDiv = document.querySelector('.django-messages');
            if (djangoMessagesDiv) {
                const messages = djangoMessagesDiv.querySelectorAll('.alert');
                messages.forEach(function(message) {
                    const text = message.textContent.trim();
                    const tags = message.className.replace('alert alert-', '').split(' ')[0];

                    if (tags.includes('success')) {
                        showAlert('success', '¡Operación Exitosa!', text);
                    } else if (tags.includes('error')) {
                        showErrorAlert(text); 
                    } else if (tags.includes('warning')) {
                        showAlert('warning', '¡Advertencia!', text);
                    } else if (tags.includes('info')) {
                        showAlert('info', 'Información', text);
                    }
                    message.style.display = 'none'; // Ocultar mensaje original después de procesar
                });
            }

            // Manejo de eliminación para list_entradas_blog con SweetAlert2 (clase deleteButton)
            document.querySelectorAll('.deleteButton').forEach(button => {
                button.addEventListener('click', function() {
                    const url = this.dataset.url;
                    const name = this.dataset.name;

                    swalWithBootstrapButtons.fire({
                        title: '¿Estás seguro?',
                        text: `¿Deseas eliminar la entrada "${name}"? Esta acción no se puede deshacer.`,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Sí, eliminar',
                        cancelButtonText: 'Cancelar',
                        reverseButtons: true
                    }).then((result) => {
                        if (result.isConfirmed) {
                            // Solo redirigir, el mensaje de éxito vendrá de Django
                            window.location.href = url;
                        } else if (result.dismiss === Swal.DismissReason.cancel) {
                            swalWithBootstrapButtons.fire({
                                title: "Cancelado",
                                text: "La entrada está a salvo :)",
                                icon: "info",
                                confirmButtonText: "OK"
                            });
                        }
                    });
                });
            });
        });
    </script>
    {% endblock %}
</body>
</html>